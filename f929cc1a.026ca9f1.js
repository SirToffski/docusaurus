(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{121:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return i})),n.d(e,"metadata",(function(){return s})),n.d(e,"rightToc",(function(){return l})),n.d(e,"default",(function(){return d}));var o=n(1),r=n(6),a=(n(0),n(128)),i={id:"block-that",title:"Create IP black-list"},s={id:"block-that",title:"Create IP black-list",description:"## Usage",source:"@site/docs/block-that.md",permalink:"/sirtoffski.github.io/docs/block-that",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/block-that.md",sidebar:"scripts",previous:{title:"Get my public IP",permalink:"/sirtoffski.github.io/docs/my-pub-ip"},next:{title:"Fish Prompt",permalink:"/sirtoffski.github.io/docs/fish-prompt"}},l=[{value:"Usage",id:"usage",children:[]},{value:"Code",id:"code",children:[]}],c={rightToc:l},p="wrapper";function d(t){var e=t.components,n=Object(r.a)(t,["components"]);return Object(a.b)(p,Object(o.a)({},c,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"You've got a router running OpenWRT or any other Unix-based OS"),Object(a.b)("li",{parentName:"ul"},"The router is configured to log IPTABLES, login, etc. events in the syslog"),Object(a.b)("li",{parentName:"ul"},"The router is also sending all the logs in real-time to a server (via syslog-ng for example)"),Object(a.b)("li",{parentName:"ul"},"You'd like to extract useful information from this log daily")),Object(a.b)("p",null,'As described above, this script runs on my server daily.\nIt looks for "DROP" messages from IPTABLES and builds a master file with offending IPs'),Object(a.b)("p",null,'There are two "master files". One labelled "top_assholes.txt" contains duplicates because it\'s structured as:'),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"2019.06.05_05:35:01 - Today's top assholes are:\n.....\n2019.06.05_12:40:02 - Today's top assholes are:\n.....\n")),Object(a.b)("p",null,'Second "master file" master_blocklist.txt contains only unique IPv4 addresses collected by the script\nSimilarly, this script can be made to track logins, DHCP, etc. - any info of interest in the syslog.'),Object(a.b)("h2",{id:"code"},"Code"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),'#!/usr/bin/env bash\n## VARIABLES ##\n# This valriable may not be required, depending on your setup. In this case syslog-ng makes a new folder daily named as the variable describes.\ntoday_dir=$(date +%Y.%m.%d)\n\ntoday_expanded=$(date +%Y.%m.%d_%T)\nrouter_IP=Bifrost\nlog_location=/var/log/network/"$router_IP"/"$today_dir"/messages\nscript_location=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)\nquery_of_interest="DROP"\n###############\n\n# Get list of rejected IPs from router logs\ngrep "$query_of_interest" "$log_location" >"$script_location"/$"today_dir"_assholes.txt\n\n# Extract Source IP addresses only\ngrep -Eo "SRC=[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}" "$script_location"/$"today_dir"_assholes.txt >"$script_location"/$"today_dir"_assholes_ip.txt\n\n# Add time and date to the top file\nprintf %b\\\\n "\n-------------------------------------------\n$today_expanded - Today\'s top assholes are:\n-------------------------------------------\n" >>"$script_location"/top_assholes.txt\n\n# Remove dupes from today\'s list and append them to the top file\nsort -n "$script_location"/$"today_dir"_assholes_ip.txt | uniq >>"$script_location"/top_assholes.txt\n\n# Again filter top file by IPs only\ngrep -Eo \'[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\' "$script_location"/top_assholes.txt | sort -n | uniq >"$script_location"/master_blocklist.txt\n\n# Now we need to clean up\n\n# Remove 0.0.0.0 from the list\nsed -i \'s/0\\.0\\.0\\.0//g\' "$script_location"/master_blocklist.txt\n\n# Remove private LAN 192.168.1.0/24 and 192.168.2.0/24 from the list\nsed -i -E \'s/192\\.168\\.[1-2]\\.[0-9]{1,3}//g\' "$script_location"/master_blocklist.txt\n\n# Finally remove 255.255.255.255\nsed -i \'s/255\\.255\\.255\\.255//g\' "$script_location"/master_blocklist.txt\n\n# And last but not the least, remove empty lines from the master list\nsed -i \'/^$/d\' "$script_location"/master_blocklist.txt\n# Final sort and de-dup\ncp "$script_location"/master_blocklist.txt "$script_location"/master_blocklist1.txt\ngrep -Eo \'[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\' "$script_location"/master_blocklist1.txt | sort -n | uniq >"$script_location"/master_blocklist.txt\n\n# Housekeeping - removing un-needed files\nrm "$script_location"/{"$today_dir"_assholes.txt,"$today_dir"_assholes_ip.txt,master_blocklist1.txt}\n\n\n\n# OPTIONAL: Setup cron to execute the script at certain time\n# Three tasks to run the script daily at 23:30, 05:30, 12:40\n#printf %b\\\\n "30 23   *   *   *    sudo bash $script_location/block_that.sh" | sudo tee -a "$crontab_file" > /dev/null\n#printf %b\\\\n "30 05   *   *   *    sudo bash $script_location/block_that.sh" | sudo tee -a "$crontab_file" > /dev/null\n#printf %b\\\\n "40 12   *   *   *    sudo bash $script_location/block_that.sh" | sudo tee -a "$crontab_file" > /dev/null\n')))}d.isMDXComponent=!0},128:function(t,e,n){"use strict";n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return f}));var o=n(0),r=n.n(o);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=r.a.createContext({}),p=function(t){var e=r.a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s({},e,{},t)),n},d=function(t){var e=p(t.components);return r.a.createElement(c.Provider,{value:e},t.children)},u="mdxType",b={inlineCode:"code",wrapper:function(t){var e=t.children;return r.a.createElement(r.a.Fragment,{},e)}},m=Object(o.forwardRef)((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,i=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),d=p(n),u=o,m=d["".concat(i,".").concat(u)]||d[u]||b[u]||a;return n?r.a.createElement(m,s({ref:e},c,{components:n})):r.a.createElement(m,s({ref:e},c))}));function f(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[u]="string"==typeof t?t:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);