(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{129:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),l=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s({},n,{},e)),t},d=function(e){var n=l(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),f=a,m=d["".concat(i,".").concat(f)]||d[f]||u[f]||r;return t?o.a.createElement(m,s({ref:n},c,{components:t})):o.a.createElement(m,s({ref:n},c))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[f]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return d}));var a=t(1),o=t(6),r=(t(0),t(129)),i={id:"freebsd-ipfw",title:"FreeBSD IPFW rules for WireGuard"},s={id:"freebsd-ipfw",title:"FreeBSD IPFW rules for WireGuard",description:"## Usage",source:"@site/docs/freebsd-ipfw.md",permalink:"/docs/freebsd-ipfw",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/freebsd-ipfw.md",sidebar:"scripts",previous:{title:"Fish Prompt",permalink:"/docs/fish-prompt"}},p=[{value:"Usage",id:"usage",children:[]},{value:"Scripts",id:"scripts",children:[]}],c={rightToc:p},l="wrapper";function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)(l,Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("hr",null),Object(r.b)("p",null,"You've installed WireGuard on FreeBSD EC2 server - now we need to configure IPFW rules correctly."),Object(r.b)("h2",{id:"scripts"},"Scripts"),Object(r.b)("hr",null),Object(r.b)("h4",{id:"etcrcconf"},"/etc/rc.conf"),Object(r.b)("p",null,"Make sure the following is present"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'firewall_enable="YES"\nfirewall_nat_enable="YES"\nfirewall_script="/usr/local/etc/IPFW.rules"\nfirewall_logging="YES"\n')),Object(r.b)("h4",{id:"sysctl"},"sysctl"),Object(r.b)("p",null,"We need the following options set"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'# Disable TCP segmentation offloading to use in-kernel NAT\n# See 30.4.4. In-kernel NAT in https://www.freebsd.org/doc/handbook/firewalls-ipfw.html\n$ sudo sysctl net.inet.tcp.tso="0"\n\n#Enable IP forwarding\n$ sudo sysctl net.inet.ip.forwarding="1"\n')),Object(r.b)("h4",{id:"usrlocaletcipfwrules"},"/usr/local/etc/IPFW.rules"),Object(r.b)("p",null,"Use the following for a firewall config template. Pay attention to ",Object(r.b)("inlineCode",{parentName:"p"},"vif"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ssh_port"),", ",Object(r.b)("inlineCode",{parentName:"p"},"pub_dns"),", ",Object(r.b)("inlineCode",{parentName:"p"},"wg_port")," and ",Object(r.b)("inlineCode",{parentName:"p"},"wg_subnet")," varibles, they will be unique to your setup."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'#!/bin/sh\n\n# ipfw config/rules\n# from FBSD Handbook, rc.firewall, et. al.\n\n# Flush all rules before we begin.\nipfw -q -f flush\n\n# Set rules command prefix\ncmd="ipfw -q add "\n# Internet-facing iface\nvif="xn0"\n# Used for outboud NAT rules\nskip="skipto 1000"\n# sshd port\nssh_port="22"\n\n#### WG-specific Options ####\n# DNS Server\npub_dns="1.1.1.1"\n# Listen Port\nwg_port="9201"\n# Subnet\nwg_subnet="10.10.0.0/24"\n\n# Wireguard interface, matching the name in /etc/wireguard/*.conf\nwg_iface="wg0"\n\n# Allow NAT\nipfw disable one_pass\nipfw -q nat 1 config if $vif same_ports unreg_only reset\n\n# allow all for localhost\n$cmd 00010 allow ip from any to any via lo0\n$cmd 00011 allow ip from any to any via $wg_iface\n\n# NAT-specifig rules\n$cmd 00099 reass all from any to any in       # reassamble inbound packets\n$cmd 00100 nat 1 ip from any to any in via $vif # NAT any inbound packets\n\n# checks stateful rules.  If marked as "keep-state" the packet has\n# already passed through filters and is "OK" without futher\n# rule matching\n$cmd 00101 check-state\n\n# allow DNS out\n$cmd 00110 $skip tcp from any to $pub_dns dst-port 53 out via $vif setup keep-state\n$cmd 00111 $skip udp from any to $pub_dns dst-port 53 out via $vif keep-state\n\n# allow dhclient connection out (port numbers are important)\n$cmd 00120 $skip udp from me 68 to any dst-port 67 out via $vif keep-state\n\n# allow HTTP HTTPS replies\n$cmd 00200 $skip tcp from any to any dst-port 80 out via $vif setup keep-state\n$cmd 00220 $skip tcp from any to any dst-port 443 out via $vif setup keep-state\n\n# allow outbound mail\n$cmd 00230 $skip tcp from any to any dst-port 25 out via $vif setup keep-state\n$cmd 00231 $skip tcp from any to any dst-port 465 out via $vif setup keep-state\n$cmd 00232 $skip tcp from any to any dst-port 587 out via $vif setup keep-state\n\n# allow WG\n$cmd 00233 $skip udp from any to any src-port $wg_port out via $vif keep-state\n$cmd 00234 $skip udp from $wg_subnet to any out via $vif keep-state\n$cmd 00235 $skip tcp from $wg_subnet to any out via $vif setup keep-state\n\n# allow icmp re: ping, et. al. \n# comment this out to disable ping, et.al.\n$cmd 00250 $skip icmp from any to any out via $vif keep-state\n\n# alllow timeserver out\n$cmd 00260 $skip tcp from any to any dst-port 37 out via $vif setup keep-state\n\n# allow ntp out\n$cmd 00270 $skip udp from any to any dst-port 123 out via $vif keep-state\n\n# allow outbound SSH traffic\n$cmd 00280 $skip tcp from any to any dst-port 22 out via $vif setup keep-state\n\n# otherwise deny outbound packets\n# outbound catchall.  \n$cmd 00299 deny log ip from any to any out via $vif\n\n# inbound rules\n# deny inbound traffic to restricted addresses\n$cmd 00300 deny ip from 192.168.0.0/16 to any in via $vif\n$cmd 00301 deny all from 172.16.0.0/12 to any in via $vif      #RFC 1918 private IP\n$cmd 00302 deny ip from 10.0.0.0/8 to any in via $vif\n$cmd 00303 deny ip from 127.0.0.0/8 to any in via $vif\n$cmd 00304 deny ip from 0.0.0.0/8 to any in via $vif\n$cmd 00305 deny ip from 169.254.0.0/16 to any in via $vif\n$cmd 00306 deny ip from 192.0.2.0/24 to any in via $vif\n$cmd 00307 deny ip from 204.152.64.0/23 to any in via $vif\n$cmd 00308 deny ip from 224.0.0.0/3 to any in via $vif\n\n# deny inbound packets on these ports\n# auth 113, netbios (services) 137/138/139, hosts-nameserver 81 \n$cmd 00315 deny tcp from any to any dst-port 113 in via $vif\n$cmd 00320 deny tcp from any to any dst-port 137 in via $vif\n$cmd 00321 deny tcp from any to any dst-port 138 in via $vif\n$cmd 00322 deny tcp from any to any dst-port 139 in via $vif\n$cmd 00323 deny tcp from any to any dst-port 81 in via $vif\n\n# deny partial packets\n$cmd 00330 deny ip from any to any frag in via $vif\n$cmd 00332 deny tcp from any to any established in via $vif\n\n# allowing icmp re: ping, etc.\n$cmd 00310 allow icmp from any to any in via $vif\n\n# allowing inbound mail, dhcp, http, https\n\n$cmd 00370 allow udp from any 67 to me dst-port 68 in via $vif keep-state\n\n# allow inbound ssh, mail. PROTECTED SERVICES: numbered ABOVE sshguard blacklist range \n$cmd 700 allow tcp from any to me dst-port $ssh_port in via $vif setup limit src-addr 2\n$cmd 702 allow udp from any to any dst-port $wg_port in via $vif keep-state\n\n\n# deny everything else, and log it\n# inbound catchall\n$cmd 999 deny log ip from any to any in via $vif\n\n# NAT\n$cmd 1000 nat 1 ip from any to any out via $vif # skipto location for outbound stateful rules\n$cmd 1001 allow ip from any to any\n\n# ipfw built-in default, don\'t uncomment\n# $cmd 65535 deny ip from any to any\n')),Object(r.b)("h4",{id:"enable-ipfw"},"Enable IPFW"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ sudo service ipfw start\n")))}d.isMDXComponent=!0}}]);